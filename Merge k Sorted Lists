/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
/* Function to merge two sorted linked list */
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL) return l2; //Return linked list if other list is empty
        if(l2 == NULL) return l1;
        
        if(l1 -> val <= l2 -> val)
        {
            l1 -> next = mergeTwoLists(l1 -> next, l2);
            return l1;
        }
        if(l2 -> val < l1 -> val)
        {
            l2 -> next = mergeTwoLists(l1, l2 -> next);
            return l2;
        }
        return l1;
    }
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode Node(INT_MIN);
        ListNode* preNode = &Node;
        
        /* Function to sort every linked list one by one with the preNode linked list */
        for(int i = 0; i < lists.size(); i++)
        {
            preNode = mergeTwoLists(preNode, lists[i]);
        }
        return preNode -> next;
    }
};
