/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 
class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        ListNode Node(-1);  //creating a new node with -1 value.
        ListNode *pre = &Node;  //adrress of new node
        int carry = 0, sum;
        
        /*While will run untill l1 or l2 are not null. also carry is non zero
        while(l1 || l2 || carry){
            sum = (l1?l1->val:0) + (l2?l2->val:0) + carry; // l1 -> val if not null else 0, same for l2
            pre->next = new ListNode(sum%10);              // Create a new node and add it to the list node with value as sum%10 to get a single digit
            carry = sum/10;                                // Get carry if available.
            
            pre = pre->next;
            l1 = l1?l1->next:l1;    // if l1 is null then stay at l1, else traverse to l1 -> next
            l2 = l2?l2->next:l2;    // if l2 is null then stay at l1, else traverse to l2 -> next
        }
        return Node.next;           // As Node's head is preNode and we dont want to include itout result so we start from next node.
    }
};
