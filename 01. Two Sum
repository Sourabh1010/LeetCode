/* 
Rather then adding two numbers and comparing it with target, we iterate through the vector subtract the current element from the
target value and find the resultant inside the hmap. If the resultant is available in the map we return the current element index and the new
resultant index, else we put the currrent value in the hmap with its index. 
Runtime: 12 ms
Memory Usage: 10.2 MB
*/

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> hmap;  //hashmap with value as key and index as values.
        vector<int> sol;
        
        //Iterate inside the nums vector.
        for(int i = 0; i < nums.size(); i++)
        {
            int number_find = target - nums[i];  //value to be found in the hashmap
            if(hmap.find(number_find) != hmap.end())
            {
            // if number find is present inside the hmap
                sol.push_back(hmap[number_find]);  //index of the number_find
                sol.push_back(i); // index of the current element
                return sol;
            }
            hmap[nums[i]] = i;   //else we add the current element to the hmap
        }
        return sol;
    }
};


// Code for Python 3

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
        hashes = dict()
        hashes[nums[0]] = 0
        for i in range(1, len(nums)):
            needed = target - nums[i]
            try:
                return (hashes[needed], i)
            except:
                hashes[nums[i]] = i
