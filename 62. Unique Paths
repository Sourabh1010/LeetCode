//Using DP
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector <vector <int>> dp(m, vector<int> (n,1));
        
        for(int i = 1; i < m; i++)
            for(int j = 1; j < n; j++){
                dp[i][j] = dp[i-1][j] + dp[i][j-1];
            }
        return dp[m-1][n-1];
    }
};

//Using only two arrays as they are all we need when we populate the dp.
class Solution {
public:
    int uniquePaths(int m, int n) {
        //vector <vector <int>> dp(m, vector<int> (n,1));
        vector<int> pre(n,1), cur(n,1);
        for(int i = 1; i < m; i++)
        {
            for(int j = 1; j < n; j++){
                cur[j] = pre[j] + cur[j-1];
            }
            swap(pre, cur);
        }
        return pre[n-1];
    }
};

//Finally using a single array rather then two.
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int> cur(n,1);
        for(int i = 1; i < m; i++)
        {
            for(int j = 1; j < n; j++){
                cur[j] += cur[j-1];
            }
        }
        return cur[n-1];
    }
};
